{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> A developer-friendly python client SDK for Korapay</p> <p>Documentation: https://gray-adeyi.github.io/korapay_client/</p> <p>Source Code: https://github.com/gray-adeyi/korapay_client</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Type hints: <code>korapay_client</code> supports type hints out of the box for a smooth developer experience.</li> <li>Easy imports: every feature you need i.e. client classes, enums,models, e.t.c. can be imported directly from <code>korapay_client</code>.</li> <li>Async support: <code>korapay_client</code> provides <code>AsyncKorapayClient</code> for the <code>async/await</code> paradigm,   suitable for use in your FastAPI based projects.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p><code>korapay_client</code> requires <code>python &gt;=3.10</code></p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install korapay-client\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>You might encounter bugs while using this project or have feature enhancements you'd like to  share with the project. Please follow the CONTRIBUTING.md  on how to contribute to this project.</p>"},{"location":"#questions","title":"Questions","text":"<p>You may have questions about this project. Please check the FAQs tab to see if your question has been answered already, if not create an issue about it in the project's Github repository.</p>"},{"location":"#sponsorship","title":"Sponsorship","text":"<p>Every little donation goes a long way. You can also give this project a star in its Github repository it helps \u2665\ufe0f</p> <p>Buy me a coffee</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#charging-a-customer-via-debit-card","title":"Charging a customer via debit card","text":"<pre><code>from uuid import uuid4\nfrom korapay_client import Card, KorapayClient, Currency\n\ncard = Card(\n    cvv=\"123\", expiry_year=\"30\", expiry_month=\"09\", number=\"4084127883172787\"\n)\nclient = KorapayClient() # assumes you have set your credentials in your environmental variables\nresponse = client.charge_via_card(\n    reference=str(uuid4()),\n    customer_name=\"John Doe\",\n    customer_email=\"johndoe@example.com\",\n    card=card,\n    amount=1000,\n    currency=Currency.NGN,\n    redirect_url=\"https://github.com/gray-adeyi/korapay_client\",\n    metadata={\"client_id\": \"qwerty\"},\n)\nprint(response)\n</code></pre>"},{"location":"examples/#authorizing-a-charge-on-a-customers-card-via-pin","title":"Authorizing a charge on a customer's card via pin","text":"<pre><code>from korapay_client import KorapayClient, Authorization\n\nclient = KorapayClient()  # assumes you have set your credentials in your environmental variables\nresponse = client.authorize_card_charge(\n    transaction_reference=\"KPY-CA-7VbzDPezNP7O9I7\",\n    authorization=Authorization.model_validate({\"pin\": \"1234\"}),\n)\nprint(response)\n</code></pre>"},{"location":"examples/#charge-a-customer-via-mobile-money","title":"Charge a customer via mobile money","text":"<pre><code>from uuid import uuid4\n\nfrom korapay_client import KorapayClient, Currency\n\nclient = KorapayClient()  # assumes you have set your credentials in your environmental variables\nresponse = client.charge_via_mobile_money(\n    reference=str(uuid4()),\n    customer_email=\"johndoe@example.com\",\n    amount=1000,\n    mobile_money_number=\"254711111111\",\n    currency=Currency.KES,\n)\nprint(response)\n</code></pre>"},{"location":"examples/#bulk-payouts-to-bank-accounts","title":"Bulk payouts to bank accounts","text":"<pre><code>from uuid import uuid4\n\nfrom korapay_client import KorapayClient, Currency, PayoutOrder\n\npayout_orders = [\n    {\n        \"reference\": str(uuid4()),\n        \"amount\": 2500,\n        \"bank_account\": {\"bank_code\": \"033\", \"account_number\": \"0000000000\"},\n        \"customer\": {\"email\": \"johndoe@example.com\"},\n    },\n    {\n        \"reference\": str(uuid4()),\n        \"amount\": 2500,\n        \"bank_account\": {\"bank_code\": \"035\", \"account_number\": \"0000000000\"},\n        \"customer\": {\"email\": \"johndoe@example.com\"},\n    },\n]\n\nclient = KorapayClient()  # assumes you have set your credentials in your environmental variables\nresponse = client.bulk_payout_to_bank_account(\n    batch_reference=str(uuid4()),\n    description=\"Test bulk payout\",\n    merchant_bears_cost=False,\n    currency=Currency.NGN,\n    payouts=[PayoutOrder.model_validate(data) for data in payout_orders],\n)\nprint(response)\n</code></pre>"},{"location":"faqs/","title":"FAQs","text":"<p>Create an issue in the project's repository with your question.</p>"},{"location":"get-started/","title":"Get Started","text":""},{"location":"get-started/#requirements","title":"Requirements","text":"<p><code>korapay_client</code> requires <code>python &gt;=3.10</code></p>"},{"location":"get-started/#installation","title":"Installation","text":"<pre><code>pip install korapay-client\n</code></pre>"},{"location":"get-started/#trying-it-out","title":"Trying it out","text":"<ul> <li>Install <code>korapay-client</code> into a virtual environment as described in the installation guide.</li> <li>Set your credentials i.e. <code>KORAPAY_PUBLIC_KEY</code>, <code>KORAPAY_SECRET_KEY</code> &amp; <code>KORAPAY_ENCRYPTION_KEY</code>     in your environmental variables.</li> <li>Start a python REPL in your virtual env by running <code>python</code></li> <li>Follow the REPL dump below.</li> </ul> <pre><code>Python 3.10.13 (main, Feb 25 2024, 04:16:53) [Clang 17.0.6 ] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from korapay_client import KorapayClient\n&gt;&gt;&gt; client = KorapayClient() # assumes you have set your credentials in your environmental variables\n&gt;&gt;&gt; response = client.get_balances()\n&gt;&gt;&gt; print(response.status_code)\n200\n&gt;&gt;&gt; print(response)\nstatus_code=200 status=True message='success' data={'GHS': {'pending_balance': 0, 'available_balance': 5000000}, 'KES': {'pending_balance': 0, 'available_balance': 4992000}, 'NGN': {'pending_balance': 0, 'available_balance': 5024016.45}, 'USD': {'pending_balance': 0, 'available_balance': 5000000}}\n&gt;&gt;&gt; \n</code></pre> <p>Info</p> <p>you can pass your credentials directly into <code>KorapayClient</code> for convenience while testing but it is discouraged. <pre><code>    from korapay_client import KorapayClient\n    client = KorapayClient(public_key='&lt;your-public-key&gt;', secret_key='&lt;your-secret-key&gt;',\n        encryption_key='&lt;your-encryption-key&gt;')\n</code></pre></p>"},{"location":"get-started/#trying-out-the-async-client","title":"Trying out the async client.","text":"<p>The previous section demonstrates how to use <code>KorapayClient</code> which is a synchronous client,  <code>korapay_client</code> also provides <code>AsyncKorapayClient</code> an asynchronous equivalent of the  <code>KorapayClient</code>. The method names for both clients are identical but the methods on the <code>AsynchronousClient</code> are awaitable. Follow the steps below to try out the asynchronous client.</p> <ul> <li>Install <code>korapay_client</code> into a virtual environment as described in the installation guide.</li> <li>Set your credentials i.e. <code>KORAPAY_PUBLIC_KEY</code>, <code>KORAPAY_SECRET_KEY</code> &amp; <code>KORAPAY_ENCRYPTION_KEY</code>     in your environmental variables.</li> <li>Start an asyncio python REPL in your virtual env by running <code>python -m asyncio</code></li> <li>Follow the REPL dump below.</li> </ul> <pre><code>asyncio REPL 3.10.13 (main, Feb 25 2024, 04:16:53) [Clang 17.0.6 ] on linux\nUse \"await\" directly instead of \"asyncio.run()\".\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from korapay_client import AsyncKorapayClient\n&gt;&gt;&gt; client = AsyncKorapayClient() # assumes you have set your credentials in your environmental variables\n&gt;&gt;&gt; response = await client.get_balances()\n&gt;&gt;&gt; print(response.status_code)\n200\n&gt;&gt;&gt; print(response)\nstatus_code=200 status=True message='success' data={'GHS': {'pending_balance': 0, 'available_balance': 5000000}, 'KES': {'pending_balance': 0, 'available_balance': 4992000}, 'NGN': {'pending_balance': 0, 'available_balance': 5024016.45}, 'USD': {'pending_balance': 0, 'available_balance': 5000000}}\n&gt;&gt;&gt; \n</code></pre> <p>Warning</p> <p>you may get a <code>ClientError</code> raised when you run <code>response = client.get_balances()</code> in the synchronous context or <code>response = await client.get_balances()</code> in the asynchronous context. This could be as a result of a timeout or other network related issues. In your projects, you want to make sure you handle this error appropriately, all client methods that make network calls may raise <code>ClientError</code>. But for just trying it how here. running those lines again might be sufficient to resolve the issue and also ensure you have an adequate internet connection.</p>"},{"location":"api_reference/enums/","title":"Enums","text":""},{"location":"api_reference/enums/#korapay_client.enums","title":"<code>korapay_client.enums</code>","text":"<p>Enumerations help improve developer experience as it limits the number of options available for a parameter value.</p> <p>The enums package contains all the internal and public enums used by <code>korapay_client</code> package.</p> Note <p>All public enums can be imported directly from <code>korapay_client</code>. E.g., <pre><code>from korapay_client import Currency, Country\n# `Currency` and `Country` are both enums and can be used in client methods requiring them\nnigeria = Country.NIGERIA\ncurrency = Currency.NGN\n</code></pre></p>"},{"location":"api_reference/enums/#korapay_client.enums.public","title":"<code>korapay_client.enums.public</code>","text":""},{"location":"api_reference/enums/#korapay_client.enums.public.Country","title":"<code>Country</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>An enums of countries supported by Korapay.</p> <p>Attributes:</p> Name Type Description <code>NIGERIA</code> <code>str</code> <p>an enum variant.</p> <code>KENYA</code> <code>str</code> <p>an enum variant.</p> <code>GHANA</code> <code>str</code> <p>an enum variant.</p> Example <pre><code>from korapay_client import Country\nng = Country.NIGERIA\n</code></pre> Note <p>Some client methods might require this enum as a parameter. Use the variant of this enum that aligns with your needs.</p> Source code in <code>src/korapay_client/enums/public.py</code> <pre><code>class Country(str, Enum):\n    \"\"\"An enums of countries supported by Korapay.\n\n    Attributes:\n        NIGERIA (str): an enum variant.\n        KENYA (str): an enum variant.\n        GHANA (str): an enum variant.\n\n    Example:\n        ```python\n        from korapay_client import Country\n        ng = Country.NIGERIA\n        ```\n\n    Note:\n        Some client methods might require this enum as a parameter. Use the variant\n        of this enum that aligns with your needs.\n    \"\"\"\n\n    NIGERIA = \"NG\"\n    KENYA = \"KE\"\n    GHANA = \"GH\"\n</code></pre>"},{"location":"api_reference/enums/#korapay_client.enums.public.Currency","title":"<code>Currency</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>An enum of currencies supported by Korapay.</p> <p>Attributes:</p> Name Type Description <code>NGN</code> <code>str</code> <p>an enum variant.</p> <code>KES</code> <code>str</code> <p>an enum variant.</p> <code>GHS</code> <code>str</code> <p>an enum variant.</p> <code>USD</code> <code>str</code> <p>an enum variant.</p> Example <pre><code>from korapay_client import Currency\nngn = Currency.NGN\nghs = Currency.GHS\n</code></pre> Note <p>Some client methods might require this enum as a parameter. Use the variant of this enum that aligns with your needs.</p> Source code in <code>src/korapay_client/enums/public.py</code> <pre><code>class Currency(str, Enum):\n    \"\"\"An enum of currencies supported by Korapay.\n\n    Attributes:\n        NGN (str): an enum variant.\n        KES (str): an enum variant.\n        GHS (str): an enum variant.\n        USD (str): an enum variant.\n\n    Example:\n        ```python\n        from korapay_client import Currency\n        ngn = Currency.NGN\n        ghs = Currency.GHS\n        ```\n\n    Note:\n        Some client methods might require this enum as a parameter. Use the variant\n        of this enum that aligns with your needs.\n    \"\"\"\n\n    NGN = \"NGN\"\n    KES = \"KES\"\n    GHS = \"GHS\"\n    USD = \"USD\"\n</code></pre>"},{"location":"api_reference/enums/#korapay_client.enums.public.MobileMoneyOperator","title":"<code>MobileMoneyOperator</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>An enum of mobile money operators supported by Korapay.</p> <p>Attributes:</p> Name Type Description <code>SAFARICOM_KENYA</code> <code>str</code> <p>an enum variant.</p> <code>AIRTEL_KENYA</code> <code>str</code> <p>an enum variant.</p> <code>AIRTEL_GHANA</code> <code>str</code> <p>an enum variant.</p> <code>MTN_GHANA</code> <code>str</code> <p>an enum variant.</p> Example <pre><code>from korapay_client import MobileMoneyOperator\nmmo = MobileMoneyOperator.AIRTEL_KENYA\n</code></pre> Note <p>Some client methods might require this enum as a parameter. Use the variant of this enum that aligns with your needs.</p> Source code in <code>src/korapay_client/enums/public.py</code> <pre><code>class MobileMoneyOperator(str, Enum):\n    \"\"\"An enum of mobile money operators supported by Korapay.\n\n    Attributes:\n        SAFARICOM_KENYA (str): an enum variant.\n        AIRTEL_KENYA (str): an enum variant.\n        AIRTEL_GHANA (str): an enum variant.\n        MTN_GHANA (str): an enum variant.\n\n    Example:\n        ```python\n        from korapay_client import MobileMoneyOperator\n        mmo = MobileMoneyOperator.AIRTEL_KENYA\n        ```\n\n    Note:\n        Some client methods might require this enum as a parameter. Use the variant\n        of this enum that aligns with your needs.\n    \"\"\"\n\n    SAFARICOM_KENYA = \"safaricom-ke\"\n    AIRTEL_KENYA = \"airtel-ke\"\n    AIRTEL_GHANA = \"airtel-gh\"\n    MTN_GHANA = \"mtn-gh\"\n</code></pre>"},{"location":"api_reference/enums/#korapay_client.enums.public.PaymentChannel","title":"<code>PaymentChannel</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>An enum of payment channels supported by Korapay.</p> <p>Attributes:</p> Name Type Description <code>CARD</code> <code>str</code> <p>an enum variant.</p> <code>BANK_TRANSFER</code> <code>str</code> <p>an enum variant.</p> <code>MOBILE_MONEY</code> <code>str</code> <p>an enum variant.</p> Example <pre><code>from korapay_client import PaymentChannel\nchannel = PaymentChannel.BANK_TRANSFER\n</code></pre> Note <p>Some client methods might require this enum as a parameter. Use the variant of this enum that aligns with your needs.</p> Source code in <code>src/korapay_client/enums/public.py</code> <pre><code>class PaymentChannel(str, Enum):\n    \"\"\"An enum of payment channels supported by Korapay.\n\n    Attributes:\n        CARD (str): an enum variant.\n        BANK_TRANSFER (str): an enum variant.\n        MOBILE_MONEY (str): an enum variant.\n\n    Example:\n        ```python\n        from korapay_client import PaymentChannel\n        channel = PaymentChannel.BANK_TRANSFER\n        ```\n\n    Note:\n        Some client methods might require this enum as a parameter. Use the variant\n        of this enum that aligns with your needs.\n    \"\"\"\n\n    CARD = \"card\"\n    BANK_TRANSFER = \"bank_transfer\"\n    MOBILE_MONEY = \"mobile_money\"\n</code></pre>"},{"location":"api_reference/exceptions/","title":"Exceptions","text":""},{"location":"api_reference/exceptions/#korapay_client.exceptions","title":"<code>korapay_client.exceptions</code>","text":""},{"location":"api_reference/exceptions/#korapay_client.exceptions.ClientError","title":"<code>ClientError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when an error or exception occurs while making the request to Korapay.</p> Source code in <code>src/korapay_client/exceptions.py</code> <pre><code>class ClientError(Exception):\n    \"\"\"Raised when an error or exception occurs while making the request to Korapay.\"\"\"\n\n    ...\n</code></pre>"},{"location":"api_reference/exceptions/#korapay_client.exceptions.MissingAPIKeyError","title":"<code>MissingAPIKeyError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when any of the public key, secret key and encryption key is missing</p> Source code in <code>src/korapay_client/exceptions.py</code> <pre><code>class MissingAPIKeyError(Exception):\n    \"\"\"Raised when any of the public key, secret key and encryption key is missing\"\"\"\n\n    ...\n</code></pre>"},{"location":"api_reference/models/","title":"Models","text":""},{"location":"api_reference/models/#korapay_client.models","title":"<code>korapay_client.models</code>","text":"<p>Models help to keep related data compact and is used by <code>korapay_client</code> client methods to accept compact data required to process a request to Korapay. All client methods in <code>korapay_client</code> all return a <code>Response</code> which is also a model. Models are pydantic models as the <code>korapay_client</code> uses <code>pydantic</code> internally for validation and data representation.</p> <p>The models package contains all the internal and public models used by <code>korapay_client</code> package.</p> Note <p>All public models can be imported directly from <code>korapay_client</code>. E.g., <pre><code>from korapay_client import Authorization, PayoutOrder\n# `Authorization` and `PayoutOrder` are both models and can be used in client methods requiring them.\nauth = Authorization(pin='1234')\n</code></pre> You can use this models as you would use <code>dataclasses</code> although it can do a lot more. <code>korapay_client</code> only requires you to use them for data representations</p>"},{"location":"api_reference/models/#korapay_client.models.public","title":"<code>korapay_client.models.public</code>","text":""},{"location":"api_reference/models/#korapay_client.models.public.AVS","title":"<code>AVS</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A pydantic model for representing the address information of a debit card for Address Verification Service.</p> <p>Attributes:</p> Name Type Description <code>state</code> <code>str</code> <p>The state of the customer.</p> <code>city</code> <code>str</code> <p>The city of the customer.</p> <code>country</code> <code>str</code> <p>The country of the customer.</p> <code>address</code> <code>str</code> <p>The address of the customer.</p> <code>zip_code</code> <code>str</code> <p>The zip code of the customer.</p> Example <pre><code>from korapay_client import AVS, Country\navs = AVS(state='lagos',city='alimosho',\ncountry=Country.NIGERIA.value,address='404 anonymous street',zip_code='253359')\n# OR\ndata = {\n    'state': 'lagos',\n    'city':'alimosho',\n    'country':'NG',\n    'address':'404 anonymous street',\n    'zip_code':'253359'\n}\navs = AVS.model_validate(data)\n</code></pre> Source code in <code>src/korapay_client/models/public.py</code> <pre><code>@dataclass\nclass AVS(BaseModel):\n    \"\"\"A pydantic model for representing the address information of a debit card for\n    Address Verification Service.\n\n    Attributes:\n        state: The state of the customer.\n        city: The city of the customer.\n        country: The country of the customer.\n        address: The address of the customer.\n        zip_code: The zip code of the customer.\n\n    Example:\n        ```python\n        from korapay_client import AVS, Country\n        avs = AVS(state='lagos',city='alimosho',\n        country=Country.NIGERIA.value,address='404 anonymous street',zip_code='253359')\n        # OR\n        data = {\n            'state': 'lagos',\n            'city':'alimosho',\n            'country':'NG',\n            'address':'404 anonymous street',\n            'zip_code':'253359'\n        }\n        avs = AVS.model_validate(data)\n        ```\n    \"\"\"\n\n    state: str\n    city: str\n    country: str\n    address: str\n    zip_code: str\n</code></pre>"},{"location":"api_reference/models/#korapay_client.models.public.Authorization","title":"<code>Authorization</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A pydantic model for representing additional information required by Korapay for authorizing a charge on the card.</p> <p>Attributes:</p> Name Type Description <code>pin</code> <code>str | None</code> <p>The debit card pin of the customer.</p> <code>otp</code> <code>str | None</code> <p>The one time password/pin obtained from the customer.</p> <code>avs</code> <code>AVS | None</code> <p>The AVS of the customer</p> Example <pre><code>from korapay_client import Authorization\nauth = Authorization(pin='1234')\n</code></pre> Note <p>For the different authorization flow, you'll only need to provide one of the fields</p> Source code in <code>src/korapay_client/models/public.py</code> <pre><code>class Authorization(BaseModel):\n    \"\"\"A pydantic model for representing additional information required by Korapay for\n    authorizing a charge on the card.\n\n    Attributes:\n        pin: The debit card pin of the customer.\n        otp: The one time password/pin obtained from the customer.\n        avs: The AVS of the customer\n\n    Example:\n        ```python\n        from korapay_client import Authorization\n        auth = Authorization(pin='1234')\n        ```\n\n    Note:\n        For the different authorization flow, you'll only need to provide one of the fields\n    \"\"\"\n\n    pin: str | None = None\n    otp: str | None = None\n    avs: AVS | None = None\n</code></pre>"},{"location":"api_reference/models/#korapay_client.models.public.BankAccount","title":"<code>BankAccount</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A pydantic model for representing bank account information.</p> <p>Attributes:</p> Name Type Description <code>bank_code</code> <code>str</code> <p>The code representing the bank e.g., 035.</p> <code>account_number</code> <code>str</code> <p>The account number of the customer.</p> Example <pre><code>from korapay_client import BankAccount\naccount = BankAccount(bank_code='033', account_number='0000000000')\n</code></pre> Source code in <code>src/korapay_client/models/public.py</code> <pre><code>class BankAccount(BaseModel):\n    \"\"\"A pydantic model for representing bank account information.\n\n    Attributes:\n        bank_code: The code representing the bank e.g., 035.\n        account_number: The account number of the customer.\n\n    Example:\n        ```python\n        from korapay_client import BankAccount\n        account = BankAccount(bank_code='033', account_number='0000000000')\n        ```\n    \"\"\"\n\n    bank_code: str\n    account_number: str\n</code></pre>"},{"location":"api_reference/models/#korapay_client.models.public.Customer","title":"<code>Customer</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A pydantic model for representing customer's information.</p> <p>Attributes:</p> Name Type Description <code>email</code> <code>EmailStr</code> <p>The email address of the customer.</p> <code>name</code> <code>Optional[str]</code> <p>The name of the customer.</p> Example <pre><code>from korapay_client import Customer\ncus = Customer(email='johndoe@example.com', name='John Doe')\n</code></pre> Source code in <code>src/korapay_client/models/public.py</code> <pre><code>class Customer(BaseModel):\n    \"\"\"A pydantic model for representing customer's information.\n\n    Attributes:\n        email: The email address of the customer.\n        name: The name of the customer.\n\n    Example:\n        ```python\n        from korapay_client import Customer\n        cus = Customer(email='johndoe@example.com', name='John Doe')\n        ```\n    \"\"\"\n\n    email: EmailStr\n    name: Optional[str] = None\n</code></pre>"},{"location":"api_reference/models/#korapay_client.models.public.PayoutOrder","title":"<code>PayoutOrder</code>","text":"<p>             Bases: <code>SerializeAmountMixin</code>, <code>BaseModel</code></p> <p>A pydantic model for representing individual transactions in a bulk payout.</p> <p>Attributes:</p> Name Type Description <code>reference</code> <code>str</code> <p>The reference of the transaction.</p> <code>amount</code> <code>int | float | Decimal</code> <p>The amount to pay the recipient.</p> <code>bank_account</code> <code>BankAccount</code> <p>The bank account information of the recipient.</p> <code>customer</code> <code>Customer</code> <p>The information about the recipient.</p> <code>narration</code> <code>Optional[str]</code> <p>The description of the transaction.</p> <code>type</code> <code>Literal['bank_account', 'mobile_money']</code> <p>The payment channel of the payout. defaults to <code>bank_account</code> as it is the only payout payment channel supported by Korapay.</p> Example <pre><code>from korapay_client import PayoutOrder\ndata = {\n    'reference': 'qqwerefdvifogirfguitheopwe',\n    'amount' 100_000,\n    'bank_account': {'bank_code':'033', 'account_number': '0000000000'},\n    'customer': {'email': 'johndoe@example.com' , 'name': 'John Doe'},\n    'narration': 'A test payout',\n    }\npayout_order = PayoutOrder.model_validate(data)\n</code></pre> Source code in <code>src/korapay_client/models/public.py</code> <pre><code>class PayoutOrder(SerializeAmountMixin, BaseModel):\n    \"\"\"A pydantic model for representing individual transactions in a bulk payout.\n\n    Attributes:\n        reference: The reference of the transaction.\n        amount: The amount to pay the recipient.\n        bank_account: The bank account information of the recipient.\n        customer: The information about the recipient.\n        narration: The description of the transaction.\n        type: The payment channel of the payout. defaults to `bank_account`\n            as it is the only payout payment channel supported by Korapay.\n\n    Example:\n        ```python\n        from korapay_client import PayoutOrder\n        data = {\n            'reference': 'qqwerefdvifogirfguitheopwe',\n            'amount' 100_000,\n            'bank_account': {'bank_code':'033', 'account_number': '0000000000'},\n            'customer': {'email': 'johndoe@example.com' , 'name': 'John Doe'},\n            'narration': 'A test payout',\n            }\n        payout_order = PayoutOrder.model_validate(data)\n        ```\n    \"\"\"\n\n    reference: str\n    amount: int | float | Decimal\n    bank_account: BankAccount\n    customer: Customer\n    narration: Optional[str] = None\n    type: Literal[\"bank_account\", \"mobile_money\"] = \"bank_account\"\n</code></pre>"},{"location":"api_reference/models/#korapay_client.models.public.Response","title":"<code>Response</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A pydantic model for representing the response returned from making a request to Korapay by calling any of the client methods.</p> <p>This model is the return type of all client methods that make REST API calls to Korapay.</p> <p>Attributes:</p> Name Type Description <code>status_code</code> <code>int</code> <p>The HTTP status code of the response.</p> <code>status</code> <code>bool</code> <p>The status of the response.</p> <code>message</code> <code>str</code> <p>The message of the response.</p> <code>data</code> <code>dict | list | None</code> <p>The data returned by Korapay as a result of making the request.</p> Example <pre><code>from korapay import KorapayClient, Country\nclient = KorapayClient() # assumes the credentials are in the environmental variables\nresponse = client.get_banks(country=Country.NIGERIA)\nprint(response.status_code)\nprint(response.data)\nprint(response)\n</code></pre> Source code in <code>src/korapay_client/models/public.py</code> <pre><code>class Response(BaseModel):\n    \"\"\"A pydantic model for representing the response returned from making a request to Korapay\n    by calling any of the client methods.\n\n    This model is the return type of all client methods that make REST API calls to Korapay.\n\n    Attributes:\n        status_code: The HTTP status code of the response.\n        status: The status of the response.\n        message: The message of the response.\n        data: The data returned by Korapay as a result of making the request.\n\n    Example:\n        ```python\n        from korapay import KorapayClient, Country\n        client = KorapayClient() # assumes the credentials are in the environmental variables\n        response = client.get_banks(country=Country.NIGERIA)\n        print(response.status_code)\n        print(response.data)\n        print(response)\n        ```\n    \"\"\"\n\n    status_code: int\n    status: bool\n    message: str\n    data: dict | list | None\n</code></pre>"},{"location":"api_reference/clients/","title":"Introduction","text":"<p>Clients are the core functionality that the <code>korapay_client</code> package provides. They are  python classes that provide methods that perform the low level REST API calls to  Korapay hence providing these methods as a simpler interface for interacting with Korapay in your python project. Each methods on the clients has a one to one mapping to the REST endpoints from  Korapay's REST API Reference. E.g., <code>KorapayClient.charge_via_card</code> maps to <code>https://api.korapay.com/merchant/api/v1/charges/card</code></p> <p><code>korapay_client</code> provides two client variants for interfacing with Korapay. I.e., <code>KorapayClient</code> a synchronous client and <code>AsyncKorapayClient</code> an asynchronous client. a  non-blocking copy of the <code>KorapayClient</code> useful in an asynchronous context. <code>AsyncKorapayClient</code> methods fully mirrors methods on the <code>KorapayClient</code> except that the methods on the <code>AsyncKorapayClient</code> are awaitable.</p> <p>All the methods of a client abstracting low level REST calls to Korapay have the same return type a <code>Response</code> which is a pydantic model containing the <code>status_code</code>, <code>status</code>, <code>message</code> and <code>data</code> fields representing the response returned by Korapay</p>"},{"location":"api_reference/clients/#instantiating-clients","title":"Instantiating clients","text":"<p>The two variants of clients provided by the <code>korapay_client</code> package can be instantiated by passing the credentials directly on class instantiation or by setting these credentials in your project's environmental variables. Credentials provided on class instantiation are prioritized over credentials provided in the environmental variables. i.e., If you have your korapay integration secret key set in your project's environmental variables, and you also provide a secret key when instantiating the client classes, the clients will use the secret key you provided while instantiating the client class.</p> <p>Where can I find my Korapay credentials?</p> <p>Your korapay credentials like your public key, secret key and encryption are available to you after creating an account with Korapay. Log in to your korapay dashbord, in your settings page, go to the API Configuration tab. click on the image below to zoom.</p> <p></p> <p>Danger</p> <p>Providing your credentials to the clients on class instantiation is highly discouraged as your credentials are sensitive. The preferred way of providing your Korapay credentials to the client is via your project's  environmental variables.</p>"},{"location":"api_reference/clients/#instantiating-clients-by-passing-credentials-directly-on-class-instantiation","title":"Instantiating clients by passing credentials directly on class instantiation","text":"<pre><code>from korapay_client import KorapayClient, AsyncKorapayClient\n\nsync_client = KorapayClient(\n    public_key=\"&lt;your-public-key&gt;\",\n    secret_key=\"&lt;your-secret-key&gt;\",\n    encryption_key=\"&lt;your-encryption-key&gt;\")\n\nasync_client = AsyncKorapayClient(\n    public_key=\"&lt;your-public-key&gt;\",\n    secret_key=\"&lt;your-secret-key&gt;\",\n    encryption_key=\"&lt;your-encryption-key&gt;\")\n</code></pre>"},{"location":"api_reference/clients/#instantiating-clients-by-providing-credentials-in-your-environmental-variables","title":"Instantiating clients by providing credentials in your environmental variables","text":"<pre><code>export KORAPAY_PUBLIC_KEY=&lt;your-public-key&gt;\nexport KORAPAY_SECRET_KEY=&lt;your-secret-key&gt;\nexport KORAPAY_ENCRYPTION_KEY=&lt;your-encryption-key&gt;\n</code></pre> <pre><code>from korapay_client import KorapayClient, AsyncKorapayClient\n\nsync_client = KorapayClient()\n\nasync_client = AsyncKorapayClient()\n</code></pre> <p>Note</p> <p><code>korapay_client</code> requires you to provide your public key, secret key and encryption key even though it doesn't really use your public key and only uses your encryption key while process requests for card payments.</p>"},{"location":"api_reference/clients/async_client/","title":"AsyncKorapayClient","text":""},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient","title":"<code>korapay_client.AsyncKorapayClient</code>","text":"<p>             Bases: <code>AsyncBaseClient</code></p> <p>Asynchronous client for interfacing with Korapay</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.authorize_card_charge","title":"<code>authorize_card_charge(transaction_reference, authorization)</code>  <code>async</code>","text":"<p>Authorize a pending charge on a debit card.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference to the pending charge returned as a response by korapay when the charge was initiated.</p> required <code>authorization</code> <code>Authorization</code> <p>A pydantic model with additional fields for authorizing the charge. The required field may vary depending on the type of authorization required. E.g., if a pending charge requires a pin for authorization <code>Authorization(pin='&lt;customer-pin&gt;')</code> is sufficient. Please refer to Korapay's Official documentation. The <code>Authorization</code> model can be imported directly from <code>korapay_client</code></p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.authorize_mobile_money_charge","title":"<code>authorize_mobile_money_charge(reference, token)</code>  <code>async</code>","text":"<p>Authorize a payment via mobile money.</p> <p>After initiating a charge via mobile money, the next step is based on the auth model returned in the response to the charge initiation. There are two ways of authorizing a transaction <code>OTP</code> and <code>STK_PROMPT</code>. After making the request to charge the number, if the status of the transaction is processing and auth_model is OTP, this means an OTP has been sent to the wallet owner's phone. You would need to collect the OTP to authorize the transaction. Collect the OTP sent to the customer\u2019s phone and call this method with the OTP and the transaction reference. If the OTP verification is successful, an STK prompt will be sent to the wallet owner's phone for him to enter his PIN.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>The reference to the transaction.</p> required <code>token</code> <code>str</code> <p>the otp or token from the customer.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.authorize_stk","title":"<code>authorize_stk(reference, pin)</code>  <code>async</code>","text":"<p>Authorize STK prompts in test/development.</p> <p>This method allows you to authorize the transaction in the Sandbox environment. It is meant to simulate a wallet owner entering their wallet PIN at the STK prompt.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>The reference of the pending transaction.</p> required <code>pin</code> <code>str</code> <p>The simulated customer's pin</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.bulk_payout_to_bank_account","title":"<code>bulk_payout_to_bank_account(batch_reference, description, merchant_bears_cost, currency, payouts)</code>  <code>async</code>","text":"<p>Initiate a bulk payout to bank accounts.</p> <p>Parameters:</p> Name Type Description Default <code>batch_reference</code> <code>str</code> <p>A reference used to identify the batch.</p> required <code>description</code> <code>str</code> <p>A narration for the batch.</p> required <code>merchant_bears_cost</code> <code>bool</code> <p>This sets who bear the fees of the transaction. If it is set to <code>True</code>, the merchant will bear the fee. If it is set to <code>False</code>, the customer will bear the fee. By default, it is <code>False</code>.</p> required <code>currency</code> <code>Currency</code> <p>A enum representing the currency to disburse in. E.g., <code>Currency.NGN</code></p> required <code>payouts</code> <code>list[PayoutOrder]</code> <p>A list of <code>PayoutOrder</code> which is a pydantic model representing individual recipient information in the bulk payout. This model can be imported directly from <code>korapay_client</code></p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.charge_via_bank_transfer","title":"<code>charge_via_bank_transfer(reference, customer_email, amount, currency, customer_name=None, account_name=None, narration=None, notification_url=None, merchant_bears_cost=False, metadata=None)</code>  <code>async</code>","text":"<p>Accept payments via bank transfers.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>A unique reference for the payment. The reference must be at least 8 characters long.</p> required <code>customer_email</code> <code>str</code> <p>The email of your customer.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount for the charge.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency for the charge. E.g., <code>Currency.NGN</code>. Currently, the only supported currency is <code>Currency.NGN</code></p> required <code>customer_name</code> <code>str | None</code> <p>The name of your customer.</p> <code>None</code> <code>account_name</code> <code>str | None</code> <p>The account name that should be displayed when the account number is resolved.</p> <code>None</code> <code>narration</code> <code>str | None</code> <p>Information/narration about the transaction.</p> <code>None</code> <code>notification_url</code> <code>str | None</code> <p>A URL to which we can send the webhook notification for the transaction.</p> <code>None</code> <code>merchant_bears_cost</code> <code>bool</code> <p>This sets who bear the fees of the transaction. If it is set to <code>True</code>, the merchant will bear the fee. If it is set to <code>False</code>, the customer will bear the fee. By default, it is <code>False</code>.</p> <code>False</code> <code>metadata</code> <code>dict | None</code> <p>A dictionary with a maximum of 5 fields/keys for storing additional information. Empty dictionaries are not allowed. Each field name (i.e., dictionary keys) can have a maximum length of 20 characters. Allowed characters: A-Z, a-z, 0-9, and -.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.charge_via_card","title":"<code>charge_via_card(reference, customer_name, customer_email, card, amount, currency, redirect_url=None, metadata=None)</code>  <code>async</code>","text":"<p>Accept debit card payments.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>A unique reference for the payment. The reference must be at least 8 characters long.</p> required <code>customer_name</code> <code>str</code> <p>The name of your customer.</p> required <code>customer_email</code> <code>EmailStr</code> <p>The email of your customer.</p> required <code>card</code> <code>Card</code> <p>A pydantic model representing your customer's card information. it can be imported directly from <code>korapay_client</code>.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount for the charge.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency for the charge. E.g., <code>Currency.NGN</code></p> required <code>redirect_url</code> <code>HttpUrl | None</code> <p>A URL to which we can redirect your customer after their payment is complete.</p> <code>None</code> <code>metadata</code> <code>dict | None</code> <p>A dictionary with a maximum of 5 fields/keys for storing additional information. Empty dictionaries are not allowed. Each field name (i.e., dictionary keys) can have a maximum length of 20 characters. Allowed characters: A-Z, a-z, 0-9, and -.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.charge_via_mobile_money","title":"<code>charge_via_mobile_money(reference, customer_email, amount, mobile_money_number, currency, notification_url=None, customer_name=None, redirect_url=None, merchant_bears_cost=False, description=None, metadata=None)</code>  <code>async</code>","text":"<p>Accept payments via mobile money.</p> Note <p>Korapay currently only supports payments in Kenyan Shillings and Ghanaian Cedis. For Kenya, they support the following wallets; Mpesa, Airtel, and Equitel. While in Ghana, they support MTN Momo and Airtel Tigo.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>A unique reference for the payment. The reference must be at least 8 characters long.</p> required <code>customer_email</code> <code>str</code> <p>The email of your customer.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount for the charge.</p> required <code>mobile_money_number</code> <code>str</code> <p>The mobile number of the customer to be charged e.g., 254700000000.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency the payment should be made in e.g., <code>Currency.KES</code>.</p> required <code>notification_url</code> <code>str | None</code> <p>The webhook URL to be called when the transaction is complete.</p> <code>None</code> <code>customer_name</code> <code>str | None</code> <p>The name of your customer.</p> <code>None</code> <code>redirect_url</code> <code>str | None</code> <p>A URL to which we can redirect your customer after their payment is complete.</p> <code>None</code> <code>merchant_bears_cost</code> <code>bool</code> <p>This sets who bear the fees of the transaction. If it is set to <code>True</code>, the merchant will bear the fee. If it is set to <code>False</code>, the customer will bear the fee. By default, it is <code>False</code>.</p> <code>False</code> <code>description</code> <code>str | None</code> <p>Information/narration about the transaction.</p> <code>None</code> <code>metadata</code> <code>dict | None</code> <p>A dictionary with a maximum of 5 fields/keys for storing additional information. Empty dictionaries are not allowed. Each field name (i.e., dictionary keys) can have a maximum length of 20 characters. Allowed characters: A-Z, a-z, 0-9, and -.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.create_virtual_bank_account","title":"<code>create_virtual_bank_account(account_name, account_reference, bank_code, customer_name, bvn, customer_email=None, nin=None)</code>  <code>async</code>","text":"<p>Create a virtual bank account.</p> <p>Virtual Bank Accounts (or Virtual Accounts) are a special type of bank account that you can use to receive payments from your customers multiple times.</p> <p>Parameters:</p> Name Type Description Default <code>account_name</code> <code>str</code> <p>The name of the Virtual Bank account.</p> required <code>account_reference</code> <code>str</code> <p>Your unique reference to identify a virtual bank account.</p> required <code>bank_code</code> <code>str</code> <p>This is the bank code of the bank providing the virtual bank account. E.g., <code>035</code> is the code for Wema Bank. Use <code>000</code> to create a virtual bank account in the sandbox environment.</p> required <code>customer_name</code> <code>str</code> <p>The customer's name.</p> required <code>bvn</code> <code>str</code> <p>The Bank Verification Number (BVN) of the customer.</p> required <code>customer_email</code> <code>str | None</code> <p>The customer's email address.</p> <code>None</code> <code>nin</code> <code>str | None</code> <p>The National Identity Number (NIN) of your customer.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.credit_sandbox_virtual_bank_account","title":"<code>credit_sandbox_virtual_bank_account(account_number, amount, currency)</code>  <code>async</code>","text":"<p>Create a virtual bank account for testing/development.</p> <p>Parameters:</p> Name Type Description Default <code>account_number</code> <code>str</code> <p>This is the account number of the Fixed Virtual Bank Account.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>This is the amount you want to credit to the account. The minimum amount is NGN 100, and the maximum amount is NGN 10,000,000.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency for the account. Only <code>Currency.NGN</code> is accepted for now.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_balances","title":"<code>get_balances()</code>  <code>async</code>","text":"<p>Retrieve all your pending and available balances.</p> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_banks","title":"<code>get_banks(country)</code>  <code>async</code>","text":"<p>Retrieve a list of all banks supported by Korapay and their properties.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>Country</code> <p>An enum representing the country to retrieve the banks from. E.g., <code>Country.NIGERIA</code>.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_bulk_transaction","title":"<code>get_bulk_transaction(bulk_reference)</code>  <code>async</code>","text":"<p>Retrieve the transactions in a bulk payout</p> <p>Parameters:</p> Name Type Description Default <code>bulk_reference</code> <code>str</code> <p>The reference of the bulk payout whose transactions you to retrieve.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_charge","title":"<code>get_charge(reference)</code>  <code>async</code>","text":"<p>Retrieve a charge.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>The reference of the charge.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_mmo","title":"<code>get_mmo(country)</code>  <code>async</code>","text":"<p>Retrieve a list of all mobile money operators supported by Korapay and their properties.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>Country</code> <p>An enum representing the country to retrieve the MMOs from. E.g., <code>Country.GHANA</code>.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_payout_transaction","title":"<code>get_payout_transaction(transaction_reference)</code>  <code>async</code>","text":"<p>Retrieve the status and details of a disbursement through the reference.</p> <p>This method can be used to verify the status of a payout transaction.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference of the payout.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_payouts","title":"<code>get_payouts(bulk_reference)</code>  <code>async</code>","text":"<p>Retrieve a bulk payout.</p> <p>Parameters:</p> Name Type Description Default <code>bulk_reference</code> <code>str</code> <p>The reference of the bulk payout to retrieve.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_virtual_bank_account","title":"<code>get_virtual_bank_account(account_reference)</code>  <code>async</code>","text":"<p>Retrieve a virtual bank account.</p> <p>Parameters:</p> Name Type Description Default <code>account_reference</code> <code>str</code> <p>Your unique reference for the virtual bank account.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.get_virtual_bank_account_transactions","title":"<code>get_virtual_bank_account_transactions(account_number)</code>  <code>async</code>","text":"<p>Retrieve transactions associated with a virtual bank account.</p> <p>Parameters:</p> Name Type Description Default <code>account_number</code> <code>str</code> <p>The account number of the virtual account.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.initiate_charge","title":"<code>initiate_charge(reference, amount, currency, narration, notification_url, customer_email, customer_name=None, channels=None, default_channel=None, redirect_url=None)</code>  <code>async</code>","text":"<p>Initiate a charge on your customer supporting multiple payment channels.</p> <p>This method allows you to configure payment channels of your choice when initiating a payment.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>Your transaction reference. Must be unique for every transaction.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount to charge the customer.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency to charge the customer in. E.g., <code>Currency.GHS</code>.</p> required <code>narration</code> <code>str</code> <p>The description of the transaction.</p> required <code>notification_url</code> <code>str</code> <p>The webhook URL to be called when the transaction is complete.</p> required <code>customer_email</code> <code>str</code> <p>The customer's email.</p> required <code>customer_name</code> <code>str | None</code> <p>The customer's name.</p> <code>None</code> <code>channels</code> <code>list[PaymentChannel] | None</code> <p>A list of <code>PaymentChannel</code> enum representing the payment channels you want to support for accepting the payments. E.g., <code>[PaymentChannel.CARD, PaymentChannel.BANK_TRANSFER]</code></p> <code>None</code> <code>default_channel</code> <code>PaymentChannel | None</code> <p>A enum representing the preferred payment channel when multiple payment channels are supported. E.g., <code>PaymentChannel.MOBILE_MONEY</code></p> <code>None</code> <code>redirect_url</code> <code>str | None</code> <p>The URL to redirect your customer when the transaction is complete.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.payout_to_bank_account","title":"<code>payout_to_bank_account(reference, amount, currency, bank_code, account_number, customer_email, narration=None, customer_name=None)</code>  <code>async</code>","text":"<p>Initiate a single disbursement to a bank account.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>Unique transaction reference.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The transaction amount.</p> required <code>currency</code> <code>Currency</code> <p>A enum representing the currency to disburse in. E.g., <code>Currency.NGN</code></p> required <code>bank_code</code> <code>str</code> <p>The Recipient bank code. Bank_codes on testmode with Test keys to simulate a successful transaction are 044, 033, 058 i.e., Access, UBA and GTB respectively, other banks would simulate a failed transaction on testmode with testkeys.</p> required <code>account_number</code> <code>str</code> <p>The recipient's account number.</p> required <code>customer_email</code> <code>str</code> <p>The customer's email.</p> required <code>narration</code> <code>str | None</code> <p>The transaction's narration or description.</p> <code>None</code> <code>customer_name</code> <code>str | None</code> <p>The customer's name.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.payout_to_mobile_money","title":"<code>payout_to_mobile_money(reference, amount, currency, mobile_money_operator, mobile_number, customer_email, customer_name=None, narration=None)</code>  <code>async</code>","text":"<p>Initiate a single disbursement to a mobile money account.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>Unique transaction reference.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The transaction amount.</p> required <code>currency</code> <code>Currency</code> <p>A enum representing the currency to disburse in. E.g., <code>Currency.NGN</code></p> required <code>mobile_money_operator</code> <code>MobileMoneyOperator | str</code> <p>An enum or str representing the mobile money operator. E.g., <code>MobileMoneyOperator.AIRTEL_KENYA</code>.</p> required <code>mobile_number</code> <code>str</code> <p>The recipient's mobile money number.</p> required <code>customer_email</code> <code>str</code> <p>The customer's email.</p> required <code>customer_name</code> <code>str | None</code> <p>The customer's name.</p> <code>None</code> <code>narration</code> <code>str | None</code> <p>The transaction's narration or description.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.resend_card_otp","title":"<code>resend_card_otp(transaction_reference)</code>  <code>async</code>","text":"<p>Resend one time password/pin for pending transaction.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference to the pending charge returned as a response by korapay when the charge was initiated.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.resend_mobile_money_otp","title":"<code>resend_mobile_money_otp(transaction_reference)</code>  <code>async</code>","text":"<p>Resend one time password/pin for a pending mobile money transaction.</p> <p>This method allows you to resend OTP in a situation where the initial OTP received had expired or was not received at all.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference of the pending transaction.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.resend_stk","title":"<code>resend_stk(transaction_reference)</code>  <code>async</code>","text":"<p>Resend STK prompt.</p> <p>This method allows you to resend the STK prompt in a situation where the initial STK prompt  received had expired or was not received at all.</p> <p>Args:     transaction_reference: The reference of the pending transaction.</p> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/async_client/#korapay_client.AsyncKorapayClient.resolve_bank_account","title":"<code>resolve_bank_account(bank_code, account_number)</code>  <code>async</code>","text":"<p>Resolves a bank account.</p> <p>This method can be used to validate if an account number is valid for the specified bank.</p> <p>Parameters:</p> Name Type Description Default <code>bank_code</code> <code>str</code> <p>The code for the bank the account number belongs to.</p> required <code>account_number</code> <code>str</code> <p>The account number to be resolved.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/","title":"KorapayClient","text":""},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient","title":"<code>korapay_client.KorapayClient</code>","text":"<p>             Bases: <code>BaseClient</code></p> <p>Synchronous client for interfacing with Korapay</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.authorize_card_charge","title":"<code>authorize_card_charge(transaction_reference, authorization)</code>","text":"<p>Authorize a pending charge on a debit card.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference to the pending charge returned as a response by korapay when the charge was initiated.</p> required <code>authorization</code> <code>Authorization</code> <p>A pydantic model with additional fields for authorizing the charge. The required field may vary depending on the type of authorization required. E.g., if a pending charge requires a pin for authorization <code>Authorization(pin='&lt;customer-pin&gt;')</code> is sufficient. Please refer to Korapay's Official documentation. The <code>Authorization</code> model can be imported directly from <code>korapay_client</code></p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.authorize_mobile_money_charge","title":"<code>authorize_mobile_money_charge(reference, token)</code>","text":"<p>Authorize a payment via mobile money.</p> <p>After initiating a charge via mobile money, the next step is based on the auth model returned in the response to the charge initiation. There are two ways of authorizing a transaction <code>OTP</code> and <code>STK_PROMPT</code>. After making the request to charge the number, if the status of the transaction is processing and auth_model is OTP, this means an OTP has been sent to the wallet owner's phone. You would need to collect the OTP to authorize the transaction. Collect the OTP sent to the customer\u2019s phone and call this method with the OTP and the transaction reference. If the OTP verification is successful, an STK prompt will be sent to the wallet owner's phone for him to enter his PIN.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>The reference to the transaction.</p> required <code>token</code> <code>str</code> <p>the otp or token from the customer.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.authorize_stk","title":"<code>authorize_stk(reference, pin)</code>","text":"<p>Authorize STK prompts in test/development.</p> <p>This method allows you to authorize the transaction in the Sandbox environment. It is meant to simulate a wallet owner entering their wallet PIN at the STK prompt.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>The reference of the pending transaction.</p> required <code>pin</code> <code>str</code> <p>The simulated customer's pin</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.bulk_payout_to_bank_account","title":"<code>bulk_payout_to_bank_account(batch_reference, description, merchant_bears_cost, currency, payouts)</code>","text":"<p>Initiate a bulk payout to bank accounts.</p> <p>Parameters:</p> Name Type Description Default <code>batch_reference</code> <code>str</code> <p>A reference used to identify the batch.</p> required <code>description</code> <code>str</code> <p>A narration for the batch.</p> required <code>merchant_bears_cost</code> <code>bool</code> <p>This sets who bear the fees of the transaction. If it is set to <code>True</code>, the merchant will bear the fee. If it is set to <code>False</code>, the customer will bear the fee. By default, it is <code>False</code>.</p> required <code>currency</code> <code>Currency</code> <p>A enum representing the currency to disburse in. E.g., <code>Currency.NGN</code></p> required <code>payouts</code> <code>list[PayoutOrder]</code> <p>A list of <code>PayoutOrder</code> which is a pydantic model representing individual recipient information in the bulk payout. This model can be imported directly from <code>korapay_client</code></p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.charge_via_bank_transfer","title":"<code>charge_via_bank_transfer(reference, customer_email, amount, currency, customer_name=None, account_name=None, narration=None, notification_url=None, merchant_bears_cost=False, metadata=None)</code>","text":"<p>Accept payments via bank transfers.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>A unique reference for the payment. The reference must be at least 8 characters long.</p> required <code>customer_email</code> <code>str</code> <p>The email of your customer.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount for the charge.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency for the charge. E.g., <code>Currency.NGN</code>. Currently, the only supported currency is <code>Currency.NGN</code></p> required <code>customer_name</code> <code>str | None</code> <p>The name of your customer.</p> <code>None</code> <code>account_name</code> <code>str | None</code> <p>The account name that should be displayed when the account number is resolved.</p> <code>None</code> <code>narration</code> <code>str | None</code> <p>Information/narration about the transaction.</p> <code>None</code> <code>notification_url</code> <code>str | None</code> <p>A URL to which we can send the webhook notification for the transaction.</p> <code>None</code> <code>merchant_bears_cost</code> <code>bool</code> <p>This sets who bear the fees of the transaction. If it is set to <code>True</code>, the merchant will bear the fee. If it is set to <code>False</code>, the customer will bear the fee. By default, it is <code>False</code>.</p> <code>False</code> <code>metadata</code> <code>dict | None</code> <p>A dictionary with a maximum of 5 fields/keys for storing additional information. Empty dictionaries are not allowed. Each field name (i.e., dictionary keys) can have a maximum length of 20 characters. Allowed characters: A-Z, a-z, 0-9, and -.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.charge_via_card","title":"<code>charge_via_card(reference, customer_name, customer_email, card, amount, currency, redirect_url=None, metadata=None)</code>","text":"<p>Accept debit card payments.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>A unique reference for the payment. The reference must be at least 8 characters long.</p> required <code>customer_name</code> <code>str</code> <p>The name of your customer.</p> required <code>customer_email</code> <code>EmailStr</code> <p>The email of your customer.</p> required <code>card</code> <code>Card</code> <p>A pydantic model representing your customer's card information. it can be imported directly from <code>korapay_client</code>.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount for the charge.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency for the charge. E.g., <code>Currency.NGN</code></p> required <code>redirect_url</code> <code>HttpUrl | None</code> <p>A URL to which we can redirect your customer after their payment is complete.</p> <code>None</code> <code>metadata</code> <code>dict | None</code> <p>A dictionary with a maximum of 5 fields/keys for storing additional information. Empty dictionaries are not allowed. Each field name (i.e., dictionary keys) can have a maximum length of 20 characters. Allowed characters: A-Z, a-z, 0-9, and -.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.charge_via_mobile_money","title":"<code>charge_via_mobile_money(reference, customer_email, amount, mobile_money_number, currency, notification_url=None, customer_name=None, redirect_url=None, merchant_bears_cost=False, description=None, metadata=None)</code>","text":"<p>Accept payments via mobile money.</p> Note <p>Korapay currently only supports payments in Kenyan Shillings and Ghanaian Cedis. For Kenya, they support the following wallets; Mpesa, Airtel, and Equitel. While in Ghana, they support MTN Momo and Airtel Tigo.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>A unique reference for the payment. The reference must be at least 8 characters long.</p> required <code>customer_email</code> <code>str</code> <p>The email of your customer.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount for the charge.</p> required <code>mobile_money_number</code> <code>str</code> <p>The mobile number of the customer to be charged e.g., 254700000000.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency the payment should be made in e.g., <code>Currency.KES</code>.</p> required <code>notification_url</code> <code>str | None</code> <p>The webhook URL to be called when the transaction is complete.</p> <code>None</code> <code>customer_name</code> <code>str | None</code> <p>The name of your customer.</p> <code>None</code> <code>redirect_url</code> <code>str | None</code> <p>A URL to which we can redirect your customer after their payment is complete.</p> <code>None</code> <code>merchant_bears_cost</code> <code>bool</code> <p>This sets who bear the fees of the transaction. If it is set to <code>True</code>, the merchant will bear the fee. If it is set to <code>False</code>, the customer will bear the fee. By default, it is <code>False</code>.</p> <code>False</code> <code>description</code> <code>str | None</code> <p>Information/narration about the transaction.</p> <code>None</code> <code>metadata</code> <code>dict | None</code> <p>A dictionary with a maximum of 5 fields/keys for storing additional information. Empty dictionaries are not allowed. Each field name (i.e., dictionary keys) can have a maximum length of 20 characters. Allowed characters: A-Z, a-z, 0-9, and -.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.create_virtual_bank_account","title":"<code>create_virtual_bank_account(account_name, account_reference, bank_code, customer_name, bvn, customer_email=None, nin=None)</code>","text":"<p>Create a virtual bank account.</p> <p>Virtual Bank Accounts (or Virtual Accounts) are a special type of bank account that you can use to receive payments from your customers multiple times.</p> <p>Parameters:</p> Name Type Description Default <code>account_name</code> <code>str</code> <p>The name of the Virtual Bank account.</p> required <code>account_reference</code> <code>str</code> <p>Your unique reference to identify a virtual bank account.</p> required <code>bank_code</code> <code>str</code> <p>This is the bank code of the bank providing the virtual bank account. E.g., <code>035</code> is the code for Wema Bank. Use <code>000</code> to create a virtual bank account in the sandbox environment.</p> required <code>customer_name</code> <code>str</code> <p>The customer's name.</p> required <code>bvn</code> <code>str</code> <p>The Bank Verification Number (BVN) of the customer.</p> required <code>customer_email</code> <code>str | None</code> <p>The customer's email address.</p> <code>None</code> <code>nin</code> <code>str | None</code> <p>The National Identity Number (NIN) of your customer.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.credit_sandbox_virtual_bank_account","title":"<code>credit_sandbox_virtual_bank_account(account_number, amount, currency)</code>","text":"<p>Create a virtual bank account for testing/development.</p> <p>Parameters:</p> Name Type Description Default <code>account_number</code> <code>str</code> <p>This is the account number of the Fixed Virtual Bank Account.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>This is the amount you want to credit to the account. The minimum amount is NGN 100, and the maximum amount is NGN 10,000,000.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency for the account. Only <code>Currency.NGN</code> is accepted for now.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_balances","title":"<code>get_balances()</code>","text":"<p>Retrieve all your pending and available balances.</p> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_banks","title":"<code>get_banks(country)</code>","text":"<p>Retrieve a list of all banks supported by Korapay and their properties.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>Country</code> <p>An enum representing the country to retrieve the banks from. E.g., <code>Country.NIGERIA</code>.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_bulk_transaction","title":"<code>get_bulk_transaction(bulk_reference)</code>","text":"<p>Retrieve the transactions in a bulk payout</p> <p>Parameters:</p> Name Type Description Default <code>bulk_reference</code> <code>str</code> <p>The reference of the bulk payout whose transactions you to retrieve.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_charge","title":"<code>get_charge(reference)</code>","text":"<p>Retrieve a charge.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>The reference of the charge.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_mmo","title":"<code>get_mmo(country)</code>","text":"<p>Retrieve a list of all mobile money operators supported by Korapay and their properties.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>Country</code> <p>An enum representing the country to retrieve the MMOs from. E.g., <code>Country.GHANA</code>.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_payout_transaction","title":"<code>get_payout_transaction(transaction_reference)</code>","text":"<p>Retrieve the status and details of a disbursement through the reference.</p> <p>This method can be used to verify the status of a payout transaction.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference of the payout.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_payouts","title":"<code>get_payouts(bulk_reference)</code>","text":"<p>Retrieve a bulk payout.</p> <p>Parameters:</p> Name Type Description Default <code>bulk_reference</code> <code>str</code> <p>The reference of the bulk payout to retrieve.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_virtual_bank_account","title":"<code>get_virtual_bank_account(account_reference)</code>","text":"<p>Retrieve a virtual bank account.</p> <p>Parameters:</p> Name Type Description Default <code>account_reference</code> <code>str</code> <p>Your unique reference for the virtual bank account.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.get_virtual_bank_account_transactions","title":"<code>get_virtual_bank_account_transactions(account_number)</code>","text":"<p>Retrieve transactions associated with a virtual bank account.</p> <p>Parameters:</p> Name Type Description Default <code>account_number</code> <code>str</code> <p>The account number of the virtual account.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.initiate_charge","title":"<code>initiate_charge(reference, amount, currency, narration, notification_url, customer_email, customer_name=None, channels=None, default_channel=None, redirect_url=None)</code>","text":"<p>Initiate a charge on your customer supporting multiple payment channels.</p> <p>This method allows you to configure payment channels of your choice when initiating a payment.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>Your transaction reference. Must be unique for every transaction.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The amount to charge the customer.</p> required <code>currency</code> <code>Currency</code> <p>An enum representing the currency to charge the customer in. E.g., <code>Currency.GHS</code>.</p> required <code>narration</code> <code>str</code> <p>The description of the transaction.</p> required <code>notification_url</code> <code>str</code> <p>The webhook URL to be called when the transaction is complete.</p> required <code>customer_email</code> <code>str</code> <p>The customer's email.</p> required <code>customer_name</code> <code>str | None</code> <p>The customer's name.</p> <code>None</code> <code>channels</code> <code>list[PaymentChannel] | None</code> <p>A list of <code>PaymentChannel</code> enum representing the payment channels you want to support for accepting the payments. E.g., <code>[PaymentChannel.CARD, PaymentChannel.BANK_TRANSFER]</code></p> <code>None</code> <code>default_channel</code> <code>PaymentChannel | None</code> <p>A enum representing the preferred payment channel when multiple payment channels are supported. E.g., <code>PaymentChannel.MOBILE_MONEY</code></p> <code>None</code> <code>redirect_url</code> <code>str | None</code> <p>The URL to redirect your customer when the transaction is complete.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.payout_to_bank_account","title":"<code>payout_to_bank_account(reference, amount, currency, bank_code, account_number, customer_email, narration=None, customer_name=None)</code>","text":"<p>Initiate a single disbursement to a bank account.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>Unique transaction reference.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The transaction amount.</p> required <code>currency</code> <code>Currency</code> <p>A enum representing the currency to disburse in. E.g., <code>Currency.NGN</code></p> required <code>bank_code</code> <code>str</code> <p>The Recipient bank code. Bank_codes on testmode with Test keys to simulate a successful transaction are 044, 033, 058 i.e., Access, UBA and GTB respectively, other banks would simulate a failed transaction on testmode with testkeys.</p> required <code>account_number</code> <code>str</code> <p>The recipient's account number.</p> required <code>customer_email</code> <code>str</code> <p>The customer's email.</p> required <code>narration</code> <code>str | None</code> <p>The transaction's narration or description.</p> <code>None</code> <code>customer_name</code> <code>str | None</code> <p>The customer's name.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.payout_to_mobile_money","title":"<code>payout_to_mobile_money(reference, amount, currency, mobile_money_operator, mobile_number, customer_email, customer_name=None, narration=None)</code>","text":"<p>Initiate a single disbursement to a mobile money account.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>Unique transaction reference.</p> required <code>amount</code> <code>int | float | Decimal</code> <p>The transaction amount.</p> required <code>currency</code> <code>Currency</code> <p>A enum representing the currency to disburse in. E.g., <code>Currency.NGN</code></p> required <code>mobile_money_operator</code> <code>MobileMoneyOperator | str</code> <p>An enum or str representing the mobile money operator. E.g., <code>MobileMoneyOperator.AIRTEL_KENYA</code>.</p> required <code>mobile_number</code> <code>str</code> <p>The recipient's mobile money number.</p> required <code>customer_email</code> <code>str</code> <p>The customer's email.</p> required <code>customer_name</code> <code>str | None</code> <p>The customer's name.</p> <code>None</code> <code>narration</code> <code>str | None</code> <p>The transaction's narration or description.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.resend_card_otp","title":"<code>resend_card_otp(transaction_reference)</code>","text":"<p>Resend one time password/pin for pending transaction.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference to the pending charge returned as a response by korapay when the charge was initiated.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.resend_mobile_money_otp","title":"<code>resend_mobile_money_otp(transaction_reference)</code>","text":"<p>Resend one time password/pin for a pending mobile money transaction.</p> <p>This method allows you to resend OTP in a situation where the initial OTP received had expired or was not received at all.</p> <p>Parameters:</p> Name Type Description Default <code>transaction_reference</code> <code>str</code> <p>The reference of the pending transaction.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.resend_stk","title":"<code>resend_stk(transaction_reference)</code>","text":"<p>Resend STK prompt.</p> <p>This method allows you to resend the STK prompt in a situation where the initial STK prompt  received had expired or was not received at all.</p> <p>Args:     transaction_reference: The reference of the pending transaction.</p> <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"},{"location":"api_reference/clients/sync_client/#korapay_client.KorapayClient.resolve_bank_account","title":"<code>resolve_bank_account(bank_code, account_number)</code>","text":"<p>Resolves a bank account.</p> <p>This method can be used to validate if an account number is valid for the specified bank.</p> <p>Parameters:</p> Name Type Description Default <code>bank_code</code> <code>str</code> <p>The code for the bank the account number belongs to.</p> required <code>account_number</code> <code>str</code> <p>The account number to be resolved.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A pydantic model containing the result of the request.</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>When an error or exception occurs while making the request to Korapay.</p>"}]}